import React, { useState, useRef, useEffect } from "react";

const API_KEY = import.meta.env.VITE_ZAP_API_KEY;
const BASE_URL = "/zap"; // proxy in vite.config.js

function VulnerabilityScan() {
  const [targetUrl, setTargetUrl] = useState("");
  const [scanStatus, setScanStatus] = useState("");
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [selectedRisk, setSelectedRisk] = useState(null);
  const pollingRef = useRef(true);

  const isValidUrl = (url) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const startScan = async () => {
    if (!isValidUrl(targetUrl)) {
      setScanStatus("Please enter a valid URL including http/https.");
      return;
    }

    setLoading(true);
    setScanStatus("Spidering target...");
    setAlerts([]);
    pollingRef.current = true;

    try {
      const spiderResp = await fetch(
        `${BASE_URL}/spider/action/scan/?url=${encodeURIComponent(targetUrl)}&apikey=${API_KEY}`
      );
      const spiderData = await spiderResp.json();
      const spiderId = spiderData.scan;
      await pollSpiderStatus(spiderId);

      const activeResp = await fetch(
        `${BASE_URL}/ascan/action/scan/?url=${encodeURIComponent(targetUrl)}&apikey=${API_KEY}`
      );
      const activeData = await activeResp.json();

      if (activeData.scan) {
        setScanStatus(`Scan started. Scan ID: ${activeData.scan}`);
        await pollScanStatus(activeData.scan);
      } else {
        setScanStatus(`Failed to start scan. Response: ${JSON.stringify(activeData)}`);
      }
    } catch (error) {
      setScanStatus(`Error starting scan: ${error.message}`);
    }

    setLoading(false);
  };

  const pollSpiderStatus = async (scanId) => {
    let status = "0";
    while (status !== "100" && pollingRef.current) {
      await new Promise((res) => setTimeout(res, 2000));
      const resp = await fetch(`${BASE_URL}/spider/view/status/?scanId=${scanId}&apikey=${API_KEY}`);
      const data = await resp.json();
      status = data.status;
      setScanStatus(`Spider progress: ${status}%`);
    }
    setScanStatus("Spider completed. Starting active scan...");
  };

  const pollScanStatus = async (scanId) => {
    let status = "0";
    while (status !== "100" && pollingRef.current) {
      await new Promise((res) => setTimeout(res, 2000));
      const resp = await fetch(`${BASE_URL}/ascan/view/status/?scanId=${scanId}&apikey=${API_KEY}`);
      const data = await resp.json();
      status = data.status;
      setScanStatus(`Active scan progress: ${status}%`);
    }
    if (pollingRef.current) {
      setScanStatus("Scan completed! Fetching alerts...");
      fetchAlerts();
    }
  };

  const fetchAlerts = async () => {
    try {
      const resp = await fetch(`${BASE_URL}/core/view/alerts/?baseurl=${encodeURIComponent(targetUrl)}&apikey=${API_KEY}`);
      const data = await resp.json();
      setAlerts(data.alerts || []);
      setScanStatus(`Found ${data.alerts?.length || 0} alerts.`);
    } catch (error) {
      setScanStatus(`Error fetching alerts: ${error.message}`);
    }
  };

  useEffect(() => () => pollingRef.current = false, []);

  const riskLevels = ['High', 'Medium', 'Low', 'Informational'];
  const grouped = alerts.reduce((acc, alert) => {
    const risk = alert.risk || 'Informational';
    if (!acc[risk]) acc[risk] = [];
    acc[risk].push(alert);
    return acc;
  }, {});

  return (
    <div className="max-w-5xl mx-auto p-6 mt-10 bg-white rounded-xl shadow-md">
      <h2 className="text-3xl font-bold mb-6 text-blue-700">ZAP Vulnerability Scanner</h2>

      <div className="flex gap-2 mb-6">
        <input
          type="text"
          className="flex-grow border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
          placeholder="Enter target URL (e.g. https://example.com)"
          value={targetUrl}
          onChange={(e) => setTargetUrl(e.target.value)}
          disabled={loading}
        />
        <button
          onClick={startScan}
          disabled={loading || !targetUrl}
          className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded"
        >
          {loading ? "Scanning..." : "Start Scan"}
        </button>
      </div>

      <div className="text-gray-700 mb-4">{scanStatus}</div>

      {alerts.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          {riskLevels.map(risk => (
            <div
              key={risk}
              onClick={() => setSelectedRisk(risk)}
              className="cursor-pointer p-4 rounded shadow hover:shadow-lg transition bg-gray-100 text-center"
            >
              <h4 className="text-lg font-semibold text-gray-800">{risk}</h4>
              <p className="text-2xl text-blue-600">{grouped[risk]?.length || 0}</p>
            </div>
          ))}
        </div>
      )}

      {selectedRisk && grouped[selectedRisk] && (
        <div className="mt-6 overflow-auto">
          <h3 className="text-2xl font-semibold mb-4 text-blue-800">
            {selectedRisk} Risk Vulnerabilities
          </h3>
          <button
            onClick={() => setSelectedRisk(null)}
            className="mb-4 text-blue-500 underline"
          >
            ‚Üê Back to Summary
          </button>
          <ul className="space-y-4">
            {grouped[selectedRisk].map((alert, idx) => (
              <li key={idx} className="p-4 bg-gray-50 rounded shadow">
                <div className="font-semibold text-lg mb-1">{alert.alert}</div>
                <div className="text-sm text-gray-600 mb-1">Risk: {alert.risk}</div>
                <div className="text-sm text-gray-600 mb-1">URL: {alert.url}</div>
                <div className="text-sm text-gray-600">{alert.description}</div>
              </li>
            ))}
          </ul>
        </div>
      )}
    </div>
  );
}

export default VulnerabilityScan;
