import React, { useState, useRef, useEffect } from "react";
import jsPDF from "jspdf";
import autoTable from "jspdf-autotable";
import { ToastContainer, toast, Slide } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";

import scanIcon from "../assets/Images/scan.png";
import startIcon from "../assets/Images/start.png";
import stopIcon from "../assets/Images/stop.png";

const API_KEY = import.meta.env.VITE_ZAP_API_KEY;
const BASE_URL = "/zap";

function VulnerabilityScan() {
  const [targetUrl, setTargetUrl] = useState("");
  const [scanStatus, setScanStatus] = useState("");
  const [alerts, setAlerts] = useState([]);
  const [sentMessages, setSentMessages] = useState([]);
  const [loading, setLoading] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const pollingRef = useRef(true);

  const isValidUrl = (url) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const startScan = async () => {
    if (!isValidUrl(targetUrl)) {
      setScanStatus("Please enter a valid URL including http/https.");
      toast("Invalid URL. Please include http/https.", {
        type: "error",
        theme: "colored",
        autoClose: 5000,
        transition: Slide,
      });
      return;
    }

    toast(`Started scan on ${targetUrl}`, {
      type: "info",
      theme: "colored",
      autoClose: 5000,
      transition: Slide,
    });

    setLoading(true);
    setAlerts([]);
    setSentMessages([]);
    setScanProgress(0);
    pollingRef.current = true;

    try {
      const spiderResp = await fetch(
        `${BASE_URL}/spider/action/scan/?url=${encodeURIComponent(
          targetUrl
        )}&apikey=${API_KEY}`
      );
      const spiderData = await spiderResp.json();
      await pollSpiderStatus(spiderData.scan);

      const activeResp = await fetch(
        `${BASE_URL}/ascan/action/scan/?url=${encodeURIComponent(
          targetUrl
        )}&apikey=${API_KEY}`
      );
      const activeData = await activeResp.json();

      if (activeData.scan) {
        await pollScanStatus(activeData.scan);
      }

      toast(`Scan completed for ${targetUrl}`, {
        type: "success",
        theme: "colored",
        autoClose: 5000,
        transition: Slide,
      });
    } catch (error) {
      setScanStatus(`Error starting scan: ${error.message}`);
      toast(`Scan failed: ${error.message}`, {
        type: "error",
        theme: "colored",
        autoClose: 5000,
        transition: Slide,
      });
    }

    setLoading(false);
  };

  const pollSpiderStatus = async (scanId) => {
    let status = "0";
    while (status !== "100" && pollingRef.current) {
      await new Promise((res) => setTimeout(res, 300));
      const resp = await fetch(
        `${BASE_URL}/spider/view/status/?scanId=${scanId}&apikey=${API_KEY}`
      );
      status = (await resp.json()).status;
    }
  };

  const pollScanStatus = async (scanId) => {
    let status = "0";
    while (status !== "100" && pollingRef.current) {
      await new Promise((res) => setTimeout(res, 300));

      const resp = await fetch(
        `${BASE_URL}/ascan/view/status/?scanId=${scanId}&apikey=${API_KEY}`
      );
      status = (await resp.json()).status;
      setScanProgress(Number(status));

      await fetchSentMessages(); // fetch messages during the scan
    }

    if (pollingRef.current) {
      setScanProgress(100);
      await fetchAlerts();
      await fetchSentMessages(); // ✅ fetch messages at the end also
    }
  };

  const stopScan = async () => {
    pollingRef.current = false; // Stop further polling
    setLoading(false); // Hide the stop button
    setScanStatus("Scan stopped by user.");

    try {
      // Stop scans on ZAP
      await fetch(`${BASE_URL}/ascan/action/stop/?apikey=${API_KEY}`);
      await fetch(`${BASE_URL}/spider/action/stop/?apikey=${API_KEY}`);

      // Fetch the latest results
      await fetchAlerts();
      await fetchSentMessages();

      toast("Scan stopped and results fetched.", {
        type: "warning",
        theme: "colored",
        autoClose: 4000,
        transition: Slide,
      });
    } catch (error) {
      toast(`Error stopping scan: ${error.message}`, {
        type: "error",
        theme: "colored",
        autoClose: 4000,
        transition: Slide,
      });
    }
  };

  const fetchAlerts = async () => {
    try {
      const resp = await fetch(
        `${BASE_URL}/core/view/alerts/?baseurl=${encodeURIComponent(
          targetUrl
        )}&apikey=${API_KEY}`
      );
      const data = await resp.json();
      setAlerts(data.alerts || []);
      setScanStatus(`Found ${data.alerts?.length || 0} alerts.`);
      toast.success(`Found ${data.alerts?.length || 0} vulnerabilities`, {
        position: "bottom-center",
        autoClose: 2500,
      });
      return data.alerts || []; // ✅ return alerts
    } catch (error) {
      setScanStatus(`Error fetching alerts: ${error.message}`);
      toast.error(`Error fetching alerts: ${error.message}`, {
        position: "top-center",
        autoClose: 2500,
      });
      return [];
    }
  };

  const fetchSentMessages = async () => {
    try {
      const resp = await fetch(
        `${BASE_URL}/core/view/messages/?baseurl=${encodeURIComponent(
          targetUrl
        )}&apikey=${API_KEY}`
      );
      const data = await resp.json();
      const messages = data.messages || [];

      const detailedMessages = await Promise.all(
        messages.map(async (msg) => {
          try {
            const msgResp = await fetch(
              `${BASE_URL}/core/view/message/?id=${msg.id}&apikey=${API_KEY}`
            );
            const msgData = await msgResp.json();
            return {
              id: msg.id,
              timeSent: msgData.message.timeSent,
              timeReceived: msgData.message.timeReceived,
              method: msgData.message.requestHeader?.split(" ")[0] || "-",
              url: msgData.message.requestHeader?.split(" ")[1] || "-",
              statusCode:
                msgData.message.responseHeader?.match(
                  /HTTP\/\d\.\d (\d{3})/
                )?.[1] || "-",
              reasonPhrase:
                msgData.message.responseHeader?.match(
                  /HTTP\/\d\.\d \d{3} (.+)/
                )?.[1] || "-",
              rtt: msgData.message.rtt,
              responseHeader: msgData.message.responseHeader,
              responseBody: msgData.message.responseBody,
            };
          } catch (err) {
            console.error(`Error fetching message ${msg.id}:`, err);
            return { id: msg.id };
          }
        })
      );

      setSentMessages(detailedMessages);
    } catch (error) {
      console.error("Error fetching sent messages:", error);
    }
  };

  const getRiskCounts = () => {
    const counts = {
      Critical: 0,
      High: 0,
      Medium: 0,
      Low: 0,
      Informational: 0,
    };

    alerts.forEach((alert) => {
      if (Object.prototype.hasOwnProperty.call(counts, alert.risk)) {
        counts[alert.risk]++;
      }
    });

    return counts;
  };

  useEffect(() => {
    return () => {
      pollingRef.current = false;
    };
  }, []);

  return (
    <div className="flex flex-col gap-6 max-w-6xl mx-auto mt-10">
      {/* Scan Section */}
      <div
        className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4"
        style={{
          background:
            "linear-gradient(to bottom, #d6f8df 0%, #ffd6e8 40%, #d6f8df 100%)",
          color: "#3e67c8",
        }}
      >
        <h2 className="text-2xl font-bold mb-4">ZAP Vulnerability Scanner</h2>

        <div className="flex items-center gap-4">
          <div className="relative flex-grow">
            <div className="relative w-full">
              <div
                className="absolute top-0 left-0 h-full bg-[#3e67c8] rounded"
                style={{
                  width: `${scanProgress}%`,
                  transition: "width 0.3s ease",
                  zIndex: 0,
                }}
              />

              <input
                type="text"
                className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400 relative"
                placeholder="Enter target URL (e.g. https://example.com)"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                disabled={loading}
                style={{
                  backgroundColor: "transparent",
                  color: scanProgress > 30 ? "white" : "green",
                  position: "relative",
                  zIndex: 1,
                }}
              />

              {loading && (
                <div
                  className="absolute top-1/2 transform -translate-y-1/2 bg-yellow-400 text-black text-xs font-bold rounded-full px-3 py-1"
                  style={{
                    left: `calc(${Math.min(
                      Math.max(scanProgress, 25),
                      95
                    )}% - 30px)`,
                    transition: "left 0.3s ease",
                    zIndex: 2,
                  }}
                >
                  {scanProgress}%
                </div>
              )}
            </div>
          </div>

          <button
            onClick={startScan}
            disabled={loading || !targetUrl}
            className={`flex items-center justify-center hover:scale-110 transition ${
              loading ? "animate-pulse" : ""
            }`}
          >
            <img
              src={loading ? scanIcon : startIcon}
              alt="Scan"
              className="w-16 h-16"
            />
          </button>
        </div>

        <div className="text-gray-700 mt-2">{scanStatus}</div>
      </div>

      {loading && scanProgress < 100 && (
        <div className="flex justify-center">
          <button
            onClick={stopScan}
            className="mt-2 hover:scale-110 transition-transform duration-300 ease-in-out"
          >
            <img src={stopIcon} alt="Stop Scan" className="w-32 h-32" />
          </button>
        </div>
      )}

      {/* Risk Summary */}
      {alerts.length > 0 && (
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
          {Object.entries(getRiskCounts()).map(([risk, count]) => (
            <div
              key={risk}
              className="flex flex-col p-4 rounded-xl text-black text-center"
              style={{ backgroundColor: getRiskColor(risk) }}
            >
              <div className="font-bold">{risk}</div>
              <div className="text-3xl">{count}</div>
            </div>
          ))}
        </div>
      )}

      {/* Detected Vulnerabilities */}
      {alerts.length > 0 && (
        <div
          className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4"
          style={{
            background:
              "linear-gradient(to bottom, #d6f8df 0%, #ffd6e8 40%, #d6f8df 100%)",
            color: "#3e67c8",
            height: "300px",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <div className="flex justify-between items-center mb-2">
            <h3 className="text-xl font-bold">Detected Vulnerabilities</h3>
            <button
              onClick={() => generateStyledPDF(alerts)}
              className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm"
            >
              Download PDF
            </button>
          </div>

          <div className="overflow-y-auto">
            <ul className="space-y-2">
              {alerts.map((alert, idx) => (
                <li key={idx} className="p-3 bg-white rounded-2xl shadow-sm">
                  <div className="font-semibold">{alert.alert}</div>
                  <div className="text-sm text-red-600">Risk: {alert.risk}</div>
                  <div className="text-sm text-gray-600">URL: {alert.url}</div>
                </li>
              ))}
            </ul>
          </div>
        </div>
      )}

      {/* Sent HTTP Messages */}
      {!loading && sentMessages.length > 0 && (
        <div
          className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4"
          style={{
            background: "linear-gradient(to bottom, #fdfdfd 0%, #e0f7fa 100%)",
            color: "#3e67c8",
            height: "350px",
            display: "flex",
            flexDirection: "column",
          }}
        >
          <h3 className="text-xl font-bold mb-2">Sent HTTP Messages</h3>
          <div className="overflow-auto">
            <table className="min-w-full text-xs text-gray-700 border-collapse">
              <thead>
                <tr className="bg-gray-200">
                  <th className="p-2 border">ID</th>
                  <th className="p-2 border">Req. Timestamp</th>
                  <th className="p-2 border">Resp. Timestamp</th>
                  <th className="p-2 border">Method</th>
                  <th className="p-2 border">URL</th>
                  <th className="p-2 border">Code</th>
                  <th className="p-2 border">Reason</th>
                  <th className="p-2 border">RTT</th>
                  <th className="p-2 border">Resp. Header</th>
                  <th className="p-2 border">Resp. Body</th>
                </tr>
              </thead>
              <tbody>
                {sentMessages.map((msg, idx) => (
                  <tr key={idx} className="hover:bg-gray-100">
                    <td className="p-2 border">{msg.id}</td>
                    <td className="p-2 border">{msg.timeSent || "-"}</td>
                    <td className="p-2 border">{msg.timeReceived || "-"}</td>
                    <td className="p-2 border">{msg.method || "-"}</td>
                    <td className="p-2 border truncate max-w-xs">
                      {msg.url || "-"}
                    </td>
                    <td className="p-2 border">{msg.statusCode || "-"}</td>
                    <td className="p-2 border">{msg.reasonPhrase || "-"}</td>
                    <td className="p-2 border">{msg.rtt || "-"}</td>
                    <td className="p-2 border">
                      {msg.responseHeader?.length || 0} bytes
                    </td>
                    <td className="p-2 border">
                      {msg.responseBody?.length || 0} bytes
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        </div>
      )}

      <ToastContainer />
    </div>
  );
}

// Helper Functions
function getRiskColor(risk) {
  switch (risk) {
    case "Critical":
      return "#e9a8f7";
    case "High":
      return "#ff6b6b";
    case "Medium":
      return "#ffb347";
    case "Low":
      return "#ffe66d";
    case "Informational":
      return "#cce5ff";
    default:
      return "#d1d5db";
  }
}

function generateStyledPDF(alerts /* targetUrl*/) {
  const doc = new jsPDF();
  doc.setFontSize(18);
  /*doc.text(`Target: ${targetUrl}`, 14, 20);*/
  const riskSummary = { Critical: 0, High: 0, Medium: 0, Low: 0, Accepted: 0 };

  alerts.forEach((alert) => {
    if (riskSummary[alert.risk] !== undefined) {
      riskSummary[alert.risk]++;
    }
  });

  const total = Object.values(riskSummary).reduce((a, b) => a + b, 0);
  const getPercent = (count) => (total ? Math.round((count / total) * 100) : 0);

  // Total Vulnerabilities
  doc.setFontSize(16).text("Total Vulnerabilities", 14, 20);
  doc
    .setFontSize(10)
    .text(
      "Below are the total number of vulnerabilities found by severity.",
      14,
      26
    );

  const levels = ["Critical", "High", "Medium", "Low", "Accepted"];
  levels.forEach((level, i) => {
    doc.setFillColor(
      level === "Medium" ? "#FFD700" : level === "Low" ? "#00BFFF" : "#E0E0E0"
    );
    doc.rect(14 + i * 35, 32, 30, 20, "F");
    doc
      .setTextColor(0)
      .setFontSize(12)
      .text(`${riskSummary[level]}`, 24 + i * 35, 45, { align: "center" });
    doc.setFontSize(8).text(level, 24 + i * 35, 51, { align: "center" });
  });

  // Progress bar
  const mediumPercent = getPercent(riskSummary.Medium);
  const lowPercent = getPercent(riskSummary.Low);
  doc.setFillColor("#FFD700").rect(14, 58, (mediumPercent / 100) * 180, 8, "F");
  doc
    .setFillColor("#00BFFF")
    .rect(
      14 + (mediumPercent / 100) * 180,
      58,
      (lowPercent / 100) * 180,
      8,
      "F"
    );

  doc.setTextColor(0).setFontSize(8);
  doc.text(`${mediumPercent}%`, 14 + (mediumPercent / 2) * 1.8, 66, {
    align: "center",
  });
  doc.text(`${lowPercent}%`, 14 + (mediumPercent + lowPercent / 2) * 1.8, 66, {
    align: "center",
  });

  // Vulnerabilities Breakdown Table
  doc.addPage();
  doc.setFontSize(16).text("Vulnerabilities Breakdown", 14, 20);

  autoTable(doc, {
    startY: 28,
    head: [["Title", "Severity", "Open", "Accepted"]],
    body: alerts.map((alert) => [
      alert.alert,
      alert.risk,
      "1", // assuming each alert is open
      "0",
    ]),
    styles: { fontSize: 9 },
  });

  doc.save(`scan-report-${Date.now()}.pdf`);
}

export default VulnerabilityScan;
