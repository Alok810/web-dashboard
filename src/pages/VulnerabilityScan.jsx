import React, { useState, useRef, useEffect } from "react";
import jsPDF from "jspdf";
import "jspdf-autotable";

import scanIcon from "../assets/Images/scan.png";
import startIcon from "../assets/Images/start.png";

const API_KEY = import.meta.env.VITE_ZAP_API_KEY;
const BASE_URL = "/zap";

function VulnerabilityScan() {
  const [targetUrl, setTargetUrl] = useState("");
  const [scanStatus, setScanStatus] = useState("");
  const [alerts, setAlerts] = useState([]);
  const [loading, setLoading] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const pollingRef = useRef(true);

  const isValidUrl = (url) => {
    try {
      new URL(url);
      return true;
    } catch {
      return false;
    }
  };

  const startScan = async () => {
    if (!isValidUrl(targetUrl)) {
      setScanStatus("Please enter a valid URL including http/https.");
      return;
    }

    setLoading(true);
    setAlerts([]);
    setScanProgress(0);
    pollingRef.current = true;

    try {
      const spiderResp = await fetch(`${BASE_URL}/spider/action/scan/?url=${encodeURIComponent(targetUrl)}&apikey=${API_KEY}`);
      const spiderData = await spiderResp.json();
      await pollSpiderStatus(spiderData.scan);

      const activeResp = await fetch(`${BASE_URL}/ascan/action/scan/?url=${encodeURIComponent(targetUrl)}&apikey=${API_KEY}`);
      const activeData = await activeResp.json();

      if (activeData.scan) {
        await pollScanStatus(activeData.scan);
      }
    } catch (error) {
      setScanStatus(`Error starting scan: ${error.message}`);
    }

    setLoading(false);
  };

  const pollSpiderStatus = async (scanId) => {
    let status = "0";
    while (status !== "100" && pollingRef.current) {
      await new Promise((res) => setTimeout(res, 1000));
      const resp = await fetch(`${BASE_URL}/spider/view/status/?scanId=${scanId}&apikey=${API_KEY}`);
      status = (await resp.json()).status;
    }
  };

  const pollScanStatus = async (scanId) => {
    let status = "0";
    while (status !== "100" && pollingRef.current) {
      await new Promise((res) => setTimeout(res, 1500));
      const resp = await fetch(`${BASE_URL}/ascan/view/status/?scanId=${scanId}&apikey=${API_KEY}`);
      status = (await resp.json()).status;
      setScanProgress(Number(status));
    }
    if (pollingRef.current) {
      setScanProgress(100);
      fetchAlerts();
    }
  };

  const fetchAlerts = async () => {
    try {
      const resp = await fetch(`${BASE_URL}/core/view/alerts/?baseurl=${encodeURIComponent(targetUrl)}&apikey=${API_KEY}`);
      const data = await resp.json();
      setAlerts(data.alerts || []);
      setScanStatus(`Found ${data.alerts?.length || 0} alerts.`);
    } catch (error) {
      setScanStatus(`Error fetching alerts: ${error.message}`);
    }
  };

  const getRiskCounts = () => {
    const counts = { Critical: 0, High: 0, Medium: 0, Low: 0, Informational: 0 };
    alerts.forEach(alert => counts[alert.risk] = (counts[alert.risk] || 0) + 1);
    return counts;
  };

  useEffect(() => () => { pollingRef.current = false; }, []);

  return (
    <div className="flex flex-col gap-6 max-w-4xl mx-auto mt-10">
      <div className="border border-gray-200 shadow-xl rounded-xl p-4" style={{ background: "linear-gradient(to bottom, #d6f8df 0%, #d6f8df 100%)", color: "#3e67c8" }}>
        <h2 className="text-2xl font-bold mb-4">ZAP Vulnerability Scanner</h2>

        <div className="flex items-center gap-4">
          <div className="relative flex-grow">
            <input
              type="text"
              className="w-full border border-gray-300 rounded px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-400"
              style={{
                background: `linear-gradient(to right, #3e67c8 ${scanProgress}%, #cce5ff ${scanProgress}%)`,
                color: scanProgress > 0 ? "white" : "black",
                transition: "background 0.3s ease-in-out",
              }}
              placeholder="Enter target URL (e.g. https://example.com)"
              value={`${scanProgress > 0 ? `${scanProgress}% ` : ""}${targetUrl}`}
              onChange={(e) => setTargetUrl(e.target.value)}
              disabled={loading}
            />
          </div>

          <button
            onClick={startScan}
            disabled={loading || !targetUrl}
            className={`flex items-center justify-center hover:scale-110 transition ${loading ? "animate-pulse" : ""}`}
          >
            <img
              src={loading ? scanIcon : startIcon}
              alt="Scan"
              className="w-16 h-16"
            />
          </button>
        </div>

        <div className="text-gray-700 mt-2">{scanStatus}</div>
      </div>

      <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-4">
        {Object.entries(getRiskCounts()).map(([risk, count]) => (
          <div key={risk} className="flex flex-col p-4 rounded-xl text-black text-center" style={{ backgroundColor: getRiskColor(risk) }}>
            <div className="font-bold">{risk}</div>
            <div className="text-3xl mb-2">{count}</div>
            <button className="bg-gray-800 hover:bg-gray-900 text-white px-2 py-1 rounded text-xs" onClick={() => downloadPDF(risk, alerts, targetUrl)}>
              PDF
            </button>
          </div>
        ))}
      </div>

      <div className="mt-6 border border-gray-200 shadow-xl rounded-xl p-4" style={{ background: "linear-gradient(to bottom, #d6f8df 0%, #d6f8df 100%)", color: "#3e67c8", height: "300px", display: "flex", flexDirection: "column" }}>
        <div className="flex justify-between items-center mb-2">
          <h3 className="text-xl font-bold">Detected Vulnerabilities</h3>
          {alerts.length > 0 && (
            <button className="bg-green-600 hover:bg-green-700 text-white px-3 py-1 rounded text-sm" onClick={() => downloadPDF(null, alerts, targetUrl)}>
              Download All (PDF)
            </button>
          )}
        </div>

        <div className="overflow-y-auto">
          {alerts.length > 0 ? (
            <ul className="space-y-2">
              {alerts.map((alert, idx) => (
                <li key={idx} className="p-3 bg-white rounded-2xl shadow-sm">
                  <div className="font-semibold">{alert.alert}</div>
                  <div className="text-sm text-red-600">Risk: {alert.risk}</div>
                  <div className="text-sm text-gray-600">URL: {alert.url}</div>
                </li>
              ))}
            </ul>
          ) : (
            <div className="text-gray-500">No vulnerabilities detected yet.</div>
          )}
        </div>
      </div>
    </div>
  );
}

// ----------------------- Helper Functions ----------------------------

function getRiskColor(risk) {
  switch (risk) {
    case "Critical": return "#e9a8f7";
    case "High": return "#ff6b6b";
    case "Medium": return "#ffb347";
    case "Low": return "#ffe66d";
    case "Informational": return "#cce5ff";
    default: return "#d1d5db";
  }
}

function downloadPDF(riskFilter, alerts, targetUrl) {
  const doc = new jsPDF();
  doc.setFontSize(18);
  doc.text("Vulnerability Scan Report", 14, 20);
  doc.setFontSize(12);
  doc.text(`Target: ${targetUrl}`, 14, 30);
  doc.text(`Scan Date: ${new Date().toLocaleString()}`, 14, 40);

  const rows = alerts
    .filter(alert => !riskFilter || alert.risk === riskFilter)
    .map((alert, idx) => [idx + 1, alert.alert, alert.risk, alert.url]);

  doc.autoTable({ head: [["#", "Vulnerability", "Risk", "URL"]], body: rows, startY: 50, styles: { fontSize: 10 } });
  doc.save(`vulnerability-${riskFilter || "all"}-${Date.now()}.pdf`);
}

export default VulnerabilityScan;
