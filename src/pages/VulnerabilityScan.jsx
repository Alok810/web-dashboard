import React, { useState, useRef } from "react";

const ZAP_API_URL = ""; // Change to your ZAP API endpoint
const API_KEY = import.meta.env.API_KEY; // Add your ZAP API key if required

function VulnerabilityScan() {
    const [targetUrl, setTargetUrl] = useState("");
    const [scanId, setScanId] = useState(null);
    const [scanStatus, setScanStatus] = useState("");
    const [alerts, setAlerts] = useState([]);
    const [loading, setLoading] = useState(false);
    const pollingRef = useRef(true);

    const isValidUrl = (url) => {
        try {
            new URL(url);
            return true;
        } catch {
            return false;
        }
    };

    const startScan = async () => {
        if (!isValidUrl(targetUrl)) {
            setScanStatus("Please enter a valid URL (including http/https).");
            return;
        }
        setLoading(true);
        setScanStatus("");
        setAlerts([]);
        pollingRef.current = true;
        try {
            const resp = await fetch(
                `${ZAP_API_URL}/ascan/action/scan/?url=${encodeURIComponent(
                    targetUrl
                )}&apikey=${API_KEY}`
            );
            const data = await resp.json();
            if (data.scan) {
                setScanId(data.scan);
                setScanStatus("Scan started. Scan ID: " + data.scan);
                pollScanStatus(data.scan);
            } else {
                setScanStatus("Failed to start scan. Response: " + JSON.stringify(data));
                setLoading(false);
            }
        } catch (err) {
            setScanStatus("Error starting scan: " + err.message);
            setLoading(false);
        }
    };

    const pollScanStatus = async (scanId) => {
        let status = "0";
        try {
            while (status !== "100" && pollingRef.current) {
                await new Promise((res) => setTimeout(res, 2000));
                const resp = await fetch(
                    `${ZAP_API_URL}/ascan/view/status/?scanId=${scanId}&apikey=${API_KEY}`
                );
                const data = await resp.json();
                status = data.status;
                setScanStatus(`Scan progress: ${status}%`);
            }
            if (pollingRef.current) {
                setScanStatus("Scan completed!");
                fetchAlerts();
            }
        } catch (err) {
            setScanStatus("Error during scan: " + err.message);
        }
        setLoading(false);
    };

    const fetchAlerts = async () => {
        try {
            const resp = await fetch(
                `${ZAP_API_URL}/core/view/alerts/?baseurl=${encodeURIComponent(
                    targetUrl
                )}&apikey=${API_KEY}`
            );
            const data = await resp.json();
            setAlerts(data.alerts || []);
        } catch (err) {
            setScanStatus("Error fetching alerts: " + err.message);
        }
    };

    // Cleanup polling if component unmounts
    React.useEffect(() => {
        return () => {
            pollingRef.current = false;
        };
    }, []);

    return (
        <div style={{ maxWidth: 600, margin: "2rem auto" }}>
            <h2>ZAP Vulnerability Scan</h2>
            <input
                type="text"
                placeholder="Enter target URL (e.g. https://example.com)"
                value={targetUrl}
                onChange={(e) => setTargetUrl(e.target.value)}
                style={{ width: "80%" }}
                disabled={loading}
            />
            <button onClick={startScan} disabled={loading || !targetUrl} style={{ marginLeft: 8 }}>
                {loading ? "Scanning..." : "Start Scan"}
            </button>
            <div style={{ margin: "1rem 0", minHeight: 24 }}>{scanStatus}</div>
            {alerts.length > 0 && (
                <div>
                    <h3>Alerts</h3>
                    <ul>
                        {alerts.map((alert, idx) => (
                            <li key={idx}>
                                <strong>{alert.alert}</strong> - {alert.risk} - {alert.url}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
}

export default VulnerabilityScan;